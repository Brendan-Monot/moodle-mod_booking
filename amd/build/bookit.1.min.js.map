{"version":3,"file":"bookit.1.min.js","sources":["../src/bookit.1.js"],"sourcesContent":["import Ajax from 'core/ajax';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\r\nimport {SELECTORS} from './bookit';\r\n\r\n/**\r\n *\r\n * @param {int} itemid\r\n * @param {string} area\r\n * @param {int} userid\r\n * @param {object} data\r\n */\r\nexport function bookit(itemid, area, userid, data) {\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('run bookit');\r\n\r\n    Ajax.call([{\r\n        methodname: \"mod_booking_bookit\",\r\n        args: {\r\n            'itemid': itemid,\r\n            'area': area,\r\n            'userid': userid,\r\n            'data': JSON.stringify(data),\r\n        },\r\n        done: function(res) {\r\n\r\n            var skipreload = false;\r\n\r\n            if (document.querySelector('.booking-elective-component')) {\r\n                window.location.reload();\r\n            }\r\n\r\n            const jsonarray = JSON.parse(res.json);\r\n\r\n            // We might have more than one template to render.\r\n            const templates = res.template.split(',');\r\n\r\n            // There might be more than one button area.\r\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\r\n                '[data-itemid=\\'' + itemid + '\\']' +\r\n                '[data-area=\\'' + area + '\\']');\r\n\r\n            const promises = [];\r\n\r\n            // We run through every button. and render the data.\r\n            buttons.forEach(button => {\r\n\r\n                // eslint-disable-next-line no-console\r\n                console.log('bookit values', button.dataset.nojs, res.status);\r\n                skipreload = true;\r\n                if (button.dataset.nojs == 1\r\n                    && res.status == 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.log('bookit skip', button.dataset.nojs, res.status);\r\n                } else {\r\n                    // For every button, we need a new jsonarray.\r\n                    const arraytoreduce = [...jsonarray];\r\n                    if (res.status == 1) {\r\n                        skipreload = false;\r\n                    }\r\n                    templates.forEach(template => {\r\n\r\n                        const data = arraytoreduce.shift();\r\n\r\n                        const datatorender = data.data ?? data;\r\n\r\n                        const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\r\n\r\n                            Templates.replaceNode(button, html, js);\r\n\r\n                            return true;\r\n                        }).catch(ex => {\r\n                            Notification.addNotification({\r\n                                message: 'failed rendering ' + ex,\r\n                                type: \"danger\"\r\n                            });\r\n                        });\r\n\r\n                        promises.push(promise);\r\n                    });\r\n                }\r\n            });\r\n\r\n            Promise.all(promises).then(() => {\r\n\r\n                const backdrop = document.querySelector(SELECTORS.STATICBACKDROP);\r\n\r\n                // eslint-disable-next-line no-console\r\n                console.log('skipreload', skipreload);\r\n\r\n                if (!backdrop && !skipreload) {\r\n                    reloadAllTables();\r\n                }\r\n\r\n                // The actions on successful booking are executed elsewhere.\r\n                return true;\r\n            }).catch(e => {\r\n                // eslint-disable-next-line no-console\r\n                console.log(e);\r\n            });\r\n        }\r\n    }]);\r\n}\r\n"],"names":["_interopRequireDefault","obj","__esModule","default","itemid","area","userid","data","console","log","Ajax","call","methodname","args","JSON","stringify","done","res","skipreload","document","querySelector","window","location","reload","jsonarray","parse","json","templates","template","split","buttons","querySelectorAll","SELECTORS","BOOKITBUTTON","promises","forEach","button","dataset","nojs","status","arraytoreduce","shift","datatorender","promise","Templates","renderForPromise","then","_ref","html","js","replaceNode","catch","ex","Notification","addNotification","message","type","push","Promise","all","backdrop","STATICBACKDROP","reloadAllTables","e","_ajax","_templates","_notification"],"mappings":"yMAE6C,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,yEAWtC,SAAgBG,OAAQC,KAAMC,OAAQC,MAGzCC,QAAQC,IAAI,cAEZC,MAAIP,QAACQ,KAAK,CAAC,CACPC,WAAY,qBACZC,KAAM,CACFT,OAAUA,OACVC,KAAQA,KACRC,OAAUA,OACVC,KAAQO,KAAKC,UAAUR,OAE3BS,KAAM,SAASC,KAEX,IAAIC,YAAa,EAEbC,SAASC,cAAc,gCACvBC,OAAOC,SAASC,SAGpB,MAAMC,UAAYV,KAAKW,MAAMR,IAAIS,MAG3BC,UAAYV,IAAIW,SAASC,MAAM,KAG/BC,QAAUX,SAASY,iBAAiBC,QAAAA,UAAUC,aAChD,iBAAoB7B,OADkB4B,iBAEpB3B,KAAO,MAEvB6B,SAAW,GAGjBJ,QAAQK,SAAQC,SAKZ,GAFA5B,QAAQC,IAAI,gBAAiB2B,OAAOC,QAAQC,KAAMrB,IAAIsB,QACtDrB,YAAa,EACc,GAAvBkB,OAAOC,QAAQC,MACE,GAAdrB,IAAIsB,OAEP/B,QAAQC,IAAI,cAAe2B,OAAOC,QAAQC,KAAMrB,IAAIsB,YACjD,CAEH,MAAMC,cAAgB,IAAIhB,WACR,GAAdP,IAAIsB,SACJrB,YAAa,GAEjBS,UAAUQ,SAAQP,WAEd,MAAMrB,KAAOiC,cAAcC,QAErBC,aAAenC,KAAKA,MAAQA,KAE5BoC,QAAUC,WAASzC,QAAC0C,iBAAiBjB,SAAUc,cAAcI,MAAKC,OAAgB,IAAfC,KAACA,KAAIC,GAAEA,IAAGF,KAI/E,OAFAH,WAASzC,QAAC+C,YAAYd,OAAQY,KAAMC,KAE7B,CAAI,IACZE,OAAMC,KACLC,cAAYlD,QAACmD,gBAAgB,CACzBC,QAAS,oBAAsBH,GAC/BI,KAAM,UACR,IAGNtB,SAASuB,KAAKd,QAAQ,GAE9B,KAGJe,QAAQC,IAAIzB,UAAUY,MAAK,KAEvB,MAAMc,SAAWzC,SAASC,cAAcY,QAAAA,UAAU6B,gBAUlD,OAPArD,QAAQC,IAAI,aAAcS,YAErB0C,UAAa1C,aACd,EAAA4C,QAAAA,oBAIG,CAAI,IACZX,OAAMY,IAELvD,QAAQC,IAAIsD,EAAE,GAEtB,IAER,EAxGAC,MAAAhE,uBAAAgE,OACAC,WAAAjE,uBAAAiE,YACAC,cAAAlE,uBAAAkE,cAsGC"}