{"version":3,"sources":["../src/editteachersforoptiondate_form.js"],"names":["init","linkSelector","formClass","resultSelector","addArgs","document","querySelector","addEventListener","e","preventDefault","form","ModalForm","args","hidebuttons","option","name","modalConfig","title","returnFocus","currentTarget","events","FORM_SUBMITTED","response","detail","innerHTML","JSON","stringify","show","initbuttons","buttons","querySelectorAll","forEach","button","openEditTeachersModal","cmid","dataset","optiondateid","modalForm","window","console","log"],"mappings":"+LA8BA,uD,OAKoB,QAAPA,CAAAA,IAAO,CAACC,CAAD,CAAeC,CAAf,CAA0BC,CAA1B,CAA8D,IAApBC,CAAAA,CAAoB,2DAC9EC,QAAQ,CAACC,aAAT,CAAuBL,CAAvB,EAAqCM,gBAArC,CAAsD,OAAtD,CAA+D,SAACC,CAAD,CAAO,CAClEA,CAAC,CAACC,cAAF,GACA,GAAMC,CAAAA,CAAI,CAAG,GAAIC,UAAJ,CAAc,CACvBT,SAAS,CAATA,CADuB,CAEvBU,IAAI,CAAER,CAAO,CAAG,CAACS,WAAW,CAAE,CAAd,CAAiBC,MAAM,CAAE,CAAC,OAAD,CAAU,QAAV,CAAzB,CAA8CC,IAAI,CAAE,OAApD,CAAH,CAAkE,CAACF,WAAW,CAAE,CAAd,CAFxD,CAGvBG,WAAW,CAAE,CAACC,KAAK,CAAE,OAAR,CAHU,CAIvBC,WAAW,CAAEV,CAAC,CAACW,aAJQ,CAAd,CAAb,CAOAT,CAAI,CAACH,gBAAL,CAAsBG,CAAI,CAACU,MAAL,CAAYC,cAAlC,CAAkD,SAACb,CAAD,CAAO,CACrD,GAAMc,CAAAA,CAAQ,CAAGd,CAAC,CAACe,MAAnB,CACAlB,QAAQ,CAACC,aAAT,CAAuBH,CAAvB,EAAuCqB,SAAvC,CAAmD,QAAUC,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAV,CAAqC,QAC3F,CAHD,EAKAZ,CAAI,CAACiB,IAAL,EACH,CAfD,CAiBH,C,eAE0B,QAAdC,CAAAA,WAAc,EAAM,CAC7B,GAAIC,CAAAA,CAAO,CAAGxB,QAAQ,CAACyB,gBAAT,CAA0B,0BAA1B,CAAd,CAEAD,CAAO,CAACE,OAAR,CAAgB,SAAAC,CAAM,CAAI,CACtBA,CAAM,CAACzB,gBAAP,CAAwB,OAAxB,CAAiC,SAACC,CAAD,CAAO,CACpCA,CAAC,CAACC,cAAF,GAEAwB,CAAqB,CAACD,CAAD,CACxB,CAJD,CAKH,CAND,CAQH,C,CAMA,QAASC,CAAAA,CAAT,CAA+BD,CAA/B,CAAuC,IAE9BE,CAAAA,CAAI,CAAGF,CAAM,CAACG,OAAP,CAAeD,IAFQ,CAG9BE,CAAY,CAAGJ,CAAM,CAACG,OAAP,CAAeC,YAHA,CAM9BC,CAAS,CAAG,GAAI1B,UAAJ,CAAc,CAG5BT,SAAS,CAAE,mDAHiB,CAK5BU,IAAI,CAAE,CACF,KAAQsB,CADN,CAEF,aAAgBE,CAFd,CALsB,CAU5BpB,WAAW,CAAE,CAACC,KAAK,CAAE,QAAR,CAVe,CAY5BC,WAAW,CAAEc,CAZe,CAAd,CANkB,CAsBpCK,CAAS,CAAC9B,gBAAV,CAA2B8B,CAAS,CAACjB,MAAV,CAAiBC,cAA5C,CAA4D,SAACb,CAAD,CAAO,CAC/D8B,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmBhC,CAAC,CAACe,MAArB,CACH,CAFD,EAKAc,CAAS,CAACV,IAAV,EACH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    mod_booking\n * @author     Bernhard Fischer\n * @copyright  2022 Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Form to edit teachers for a specific optiondate.\n *\n * @module     mod_booking/editteachersforoptiondate_form\n * @copyright  2022 Wunderbyte GmbH\n * @author     Bernhard Fischer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalForm from 'core_form/modalform';\n/* Import {\n    get_string as getString\n} from 'core/str';*/\n\nexport const init = (linkSelector, formClass, resultSelector, addArgs = false) => {\n    document.querySelector(linkSelector).addEventListener('click', (e) => {\n        e.preventDefault();\n        const form = new ModalForm({\n            formClass,\n            args: addArgs ? {hidebuttons: 1, option: ['green', 'yellow'], name: 'Test2'} : {hidebuttons: 1},\n            modalConfig: {title: 'Test2'},\n            returnFocus: e.currentTarget\n        });\n        // If necessary extend functionality by overriding class methods, for example:\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            const response = e.detail;\n            document.querySelector(resultSelector).innerHTML = '<pre>' + JSON.stringify(response) + '</pre>';\n        });\n\n        form.show();\n    });\n\n};\n\nexport const initbuttons = () => {\n    let buttons = document.querySelectorAll('.btn-modal-edit-teachers');\n\n    buttons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            e.preventDefault();\n\n            openEditTeachersModal(button);\n        });\n    });\n\n};\n\n/**\n *\n * @param {*} button\n */\n function openEditTeachersModal(button) {\n\n    const cmid = button.dataset.cmid;\n    const optiondateid = button.dataset.optiondateid;\n\n\n    const modalForm = new ModalForm({\n\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"mod_booking\\\\form\\\\editteachersforoptiondate_form\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {\n            'cmid': cmid,\n            'optiondateid': optiondateid,\n        },\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: 'xxxxxx'}, // GetString('xxxxx', 'mod_booking'\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: button\n    });\n    // Listen to events if you want to execute something on form submit.\n    // Event detail will contain everything the process() function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n        window.console.log(e.detail);\n    });\n\n    // Show the form.\n    modalForm.show();\n}\n"],"file":"editteachersforoptiondate_form.min.js"}