{"version":3,"sources":["../src/modaloptiondateform.js"],"names":["addNotification","msg","console","log","init","modalTitle","formClass","resultSelector","waitForElm","then","customdatesbtn","addEventListener","e","preventDefault","form","ModalForm","modalConfig","title","returnFocus","currentTarget","events","FORM_SUBMITTED","response","detail","document","querySelector","innerHTML","JSON","stringify","LOADED","NOSUBMIT_BUTTON_PRESSED","getAttribute","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","message","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","show","selector","Promise","resolve","observer","MutationObserver","disconnect","observe","body","childList","subtree"],"mappings":"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","sourcesContent":["/* eslint-disable promise/always-return */\n/* eslint-disable promise/catch-or-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Modal form to create specific option dates.\n *\n * @module     mod_booking\n * @copyright  2022 Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalForm from 'core_form/modalform';\nimport {add as addToast} from 'core/toast';\n\nconst addNotification = msg => {\n    addToast(msg);\n    // eslint-disable-next-line no-console\n    console.log(msg);\n};\n\n\nexport const init = (modalTitle, formClass, resultSelector) => {\n    waitForElm('button[name=\"customdatesbtn\"]').then((customdatesbtn) => {\n        customdatesbtn.addEventListener('click', (e) => {\n            e.preventDefault();\n            const form = new ModalForm({\n                formClass,\n                modalConfig: {title: modalTitle},\n                returnFocus: e.currentTarget\n            });\n            // If necessary extend functionality by overriding class methods, for example:\n            form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n                const response = e.detail;\n                addNotification('Form submitted...');\n                document.querySelector(resultSelector).innerHTML = '<pre>' + JSON.stringify(response) + '</pre>';\n            });\n\n            // Demo of different events.\n            form.addEventListener(form.events.LOADED, () => addNotification('Form loaded'));\n            form.addEventListener(form.events.NOSUBMIT_BUTTON_PRESSED,\n                (e) => addNotification('No submit button pressed ' + e.detail.getAttribute('name')));\n            form.addEventListener(form.events.CLIENT_VALIDATION_ERROR, () => addNotification('Client-side validation error'));\n            form.addEventListener(form.events.SERVER_VALIDATION_ERROR, () => addNotification('Server-side validation error'));\n            form.addEventListener(form.events.ERROR, (e) => addNotification('Oopsie - ' + e.detail.message));\n            form.addEventListener(form.events.SUBMIT_BUTTON_PRESSED, () => addNotification('Submit button pressed'));\n            form.addEventListener(form.events.CANCEL_BUTTON_PRESSED, () => addNotification('Cancel button pressed'));\n\n            form.show();\n        });\n    });\n};\n\n/**\n * Wait until a certain element is loaded.\n * @param {string} selector - The element selector.\n * @returns {Promise}\n */\nfunction waitForElm(selector) {\n    // eslint-disable-next-line consistent-return\n    return new Promise(resolve => {\n        if (document.querySelector(selector)) {\n            return resolve(document.querySelector(selector));\n        }\n\n        const observer = new MutationObserver(() => {\n            if (document.querySelector(selector)) {\n                resolve(document.querySelector(selector));\n                observer.disconnect();\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    });\n}\n"],"file":"modaloptiondateform.min.js"}