{"version":3,"file":"subbookingAdditionalPerson.min.js","sources":["../src/subbookingAdditionalPerson.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/subbookingAdditionalPerson\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\nimport {initbookitbutton} from 'mod_booking/bookit';\nimport {buttoninit} from 'local_shopping_cart/cart';\nimport {eventTypes} from 'core_filters/events';\n\nconst SELECTOR = {\n    MODALID: 'sbPrePageModal_',\n    FORMCONTAINER: '.subbooking-additionalperson-form',\n    MODALBODY: '.modal-body',\n    CONTINUECONTAINER: ' div.prepage-booking-footer .continue-container',\n    CONTINUEBUTTON: ' div.prepage-booking-footer .continue-button',\n    BOOKINGBUTTON: '[data-area=\"subbooking\"][data-userid][data-itemid=\"',\n};\n\n/**\n * Init function.\n */\nexport async function init() {\n\n    // eslint-disable-next-line no-console\n    console.log('init dynamic form');\n\n    const containers = document.querySelectorAll(SELECTOR.FORMCONTAINER);\n\n    containers.forEach(async container => {\n        const id = container.dataset.id;\n\n        const continuebutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.CONTINUEBUTTON);\n        const dynamicForm = new DynamicForm(container, 'mod_booking\\\\form\\\\subbooking\\\\additionalperson_form');\n\n        // We need to render the dynamic form right away, so we can acutally have all the necessary elements present.\n        await dynamicForm.load({id: id});\n\n        const bookitbutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.BOOKINGBUTTON + id);\n\n        // eslint-disable-next-line no-console\n        console.log(bookitbutton, continuebutton);\n\n        dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n            const response = e.detail;\n\n            if (response) {\n\n                unblockButtons(id, container);\n\n                dynamicForm.load({id: id});\n            }\n        });\n\n        document.addEventListener(eventTypes.filterContentUpdated, e => {\n            // eslint-disable-next-line no-console\n            console.log(e.target);\n\n            initButtons(id, container, dynamicForm);\n        });\n\n        dynamicForm.addEventListener(dynamicForm.events.SERVER_VALIDATION_ERROR, () => {\n\n            // eslint-disable-next-line no-console\n            console.log('error with form');\n\n            initButtons(id, container, dynamicForm);\n        });\n\n        dynamicForm.addEventListener('change', e => {\n\n            if (e.target.classList.contains('custom-select')) {\n                const button = document.querySelector('.subbooking-additionalperson-form [data-no-submit=\"1\"]');\n                dynamicForm.processNoSubmitButton(button);\n            }\n        });\n\n        initButtons(id, container, dynamicForm);\n    });\n}\n\n/**\n * @param {integer} id\n * @param {HTMLElement} container\n * @param {*} dynamicForm\n */\nfunction initButtons(id, container, dynamicForm) {\n\n    // We always need to get the buttons anew, as they might have been replaced.\n\n    const bookitbutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.BOOKINGBUTTON + id);\n\n    // This goes on the bookit button as well as on the shopping cart.\n    // It will prevent the action to be triggered.\n    // Unless the form is validated (see above).\n    if (bookitbutton) {\n\n        // eslint-disable-next-line no-console\n        console.log('bookitbutton', bookitbutton);\n\n        blockButton(bookitbutton, dynamicForm);\n    }\n\n    // Only after the Form is loaded, we reinitialze the buttons.\n    try {\n        buttoninit();\n        initbookitbutton();\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    }\n}\n\n/**\n *\n * @param {HTMLElement} button\n * @param {*} dynamicForm\n */\nfunction blockButton(button, dynamicForm) {\n\n    // eslint-disable-next-line no-console\n    console.log('blockButton', button);\n\n    if (!button.dataset.blocked) {\n        button.dataset.blocked = true;\n\n         // eslint-disable-next-line no-console\n        console.log('blockButton add listener', button);\n\n        button.addEventListener('click', () => {\n\n            // eslint-disable-next-line no-console\n            console.log('click');\n\n            dynamicForm.submitFormAjax();\n        });\n    }\n}\n\n/**\n *\n * @param {integer} id\n * @param {HTMLElement} container\n */\nfunction unblockButtons(id, container) {\n\n    // We always need to get the buttons anew, as they might have been replaced.\n\n    const bookitbutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.BOOKINGBUTTON + id);\n\n    if (bookitbutton) {\n        bookitbutton.dataset.blocked = 'false';\n        bookitbutton.click();\n    }\n}\n\n"],"names":["obj","async","console","log","document","querySelectorAll","SELECTOR","FORMCONTAINER","forEach","id","container","dataset","continuebutton","closest","MODALBODY","querySelector","CONTINUEBUTTON","dynamicForm","DynamicForm","load","bookitbutton","BOOKINGBUTTON","addEventListener","events","FORM_SUBMITTED","e","detail","blocked","click","unblockButtons","eventTypes","filterContentUpdated","target","initButtons","SERVER_VALIDATION_ERROR","classList","contains","button","processNoSubmitButton","_dynamicform","__esModule","default","MODALID","CONTINUECONTAINER","submitFormAjax","blockButton","buttoninit","initbookitbutton"],"mappings":"iNAqBgD,IAAAA;;;;;2EAiBzCC,iBAGHC,QAAQC,IAAI,qBAEOC,SAASC,iBAAiBC,SAASC,eAE3CC,SAAQP,kBACf,MAAMQ,GAAKC,UAAUC,QAAQF,GAEvBG,eAAiBF,UAAUG,QAAQP,SAASQ,WAAWC,cAAcT,SAASU,gBAC9EC,YAAc,IAAIC,aAAAA,QAAYR,UAAW,8DAGzCO,YAAYE,KAAK,CAACV,GAAIA,KAE5B,MAAMW,aAAeV,UAAUG,QAAQP,SAASQ,WAAWC,cAAcT,SAASe,cAAgBZ,IAGlGP,QAAQC,IAAIiB,aAAcR,gBAE1BK,YAAYK,iBAAiBL,YAAYM,OAAOC,gBAAgBC,IAC3CA,EAAEC,UAoG/B,SAAwBjB,GAAIC,WAIxB,MAAMU,aAAeV,UAAUG,QAAQP,SAASQ,WAAWC,cAAcT,SAASe,cAAgBZ,IAE9FW,eACAA,aAAaT,QAAQgB,QAAU,QAC/BP,aAAaQ,QAErB,CA1GgBC,CAAepB,GAAIC,WAEnBO,YAAYE,KAAK,CAACV,GAAIA,KAC1B,IAGJL,SAASkB,iBAAiBQ,QAAAA,WAAWC,sBAAsBN,IAEvDvB,QAAQC,IAAIsB,EAAEO,QAEdC,YAAYxB,GAAIC,UAAWO,YAAY,IAG3CA,YAAYK,iBAAiBL,YAAYM,OAAOW,yBAAyB,KAGrEhC,QAAQC,IAAI,mBAEZ8B,YAAYxB,GAAIC,UAAWO,YAAY,IAG3CA,YAAYK,iBAAiB,UAAUG,IAEnC,GAAIA,EAAEO,OAAOG,UAAUC,SAAS,iBAAkB,CAC9C,MAAMC,OAASjC,SAASW,cAAc,0DACtCE,YAAYqB,sBAAsBD,OACtC,KAGJJ,YAAYxB,GAAIC,UAAWO,YAAY,GAE/C,EA1EAsB,cAAgDvC,IAAhDuC,eAAgDvC,IAAAwC,WAAAxC,IAAAyC,CAAAA,QAAAzC,KAKhD,MAAMM,SAAW,CACboC,QAAS,kBACTnC,cAAe,oCACfO,UAAW,cACX6B,kBAAmB,kDACnB3B,eAAgB,+CAChBK,cAAe,uDAsEnB,SAASY,YAAYxB,GAAIC,UAAWO,aAIhC,MAAMG,aAAeV,UAAUG,QAAQP,SAASQ,WAAWC,cAAcT,SAASe,cAAgBZ,IAK9FW,eAGAlB,QAAQC,IAAI,eAAgBiB,cAoBpC,SAAqBiB,OAAQpB,aAGzBf,QAAQC,IAAI,cAAekC,QAEtBA,OAAO1B,QAAQgB,UAChBU,OAAO1B,QAAQgB,SAAU,EAGzBzB,QAAQC,IAAI,2BAA4BkC,QAExCA,OAAOf,iBAAiB,SAAS,KAG7BpB,QAAQC,IAAI,SAEZc,YAAY2B,gBAAgB,IAGxC,CArCQC,CAAYzB,aAAcH,cAI9B,KACI,EAAA6B,MAAAA,eACA,EAAAC,QAAAA,mBACH,CAAC,MAAOtB,GAELvB,QAAQC,IAAIsB,EAChB,CACJ,CA2CC"}