{"version":3,"file":"subbookingAdditionalPerson.min.js","sources":["../src/subbookingAdditionalPerson.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/subbookingAdditionalPerson\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DynamicForm from 'core_form/dynamicform';\nimport {initbookitbutton} from 'mod_booking/bookit';\nimport {buttoninit} from 'local_shopping_cart/cart';\nimport {eventTypes} from 'core_filters/events';\n\nconst SELECTOR = {\n    MODALID: 'sbPrePageModal_',\n    FORMCONTAINER: '.subbooking-additionalperson-form',\n    MODALBODY: '.modal-body',\n    CONTINUECONTAINER: ' div.prepage-booking-footer .continue-container',\n    CONTINUEBUTTON: ' div.prepage-booking-footer .continue-button',\n    BOOKINGBUTTON: '[data-area=\"subbooking\"][data-userid][data-itemid=\"',\n};\n\n/**\n * Init function.\n */\nexport async function init() {\n\n    // eslint-disable-next-line no-console\n    console.log('init dynamic form');\n\n    const container = document.querySelector(SELECTOR.FORMCONTAINER);\n\n    const id = container.dataset.id;\n\n    const continuebutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.CONTINUEBUTTON);\n    const dynamicForm = new DynamicForm(container, 'mod_booking\\\\form\\\\subbooking\\\\additionalperson_form');\n\n    // We need to render the dynamic form right away, so we can acutally have all the necessary elements present.\n    await dynamicForm.load({id: id});\n\n    const bookitbutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.BOOKINGBUTTON + id);\n\n    // eslint-disable-next-line no-console\n    console.log(bookitbutton, continuebutton);\n\n    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n        const response = e.detail;\n\n        if (response) {\n\n            unblockButtons(id, container);\n\n            dynamicForm.load({id: id});\n        }\n    });\n\n    document.addEventListener(eventTypes.filterContentUpdated, e => {\n        // eslint-disable-next-line no-console\n        console.log(e.target);\n\n        initButtons(id, container, dynamicForm);\n    });\n\n    dynamicForm.addEventListener(dynamicForm.events.SERVER_VALIDATION_ERROR, () => {\n\n        // eslint-disable-next-line no-console\n        console.log('error with form');\n\n        initButtons(id, container, dynamicForm);\n    });\n\n    dynamicForm.addEventListener('change', e => {\n\n        if (e.target.classList.contains('custom-select')) {\n            const button = document.querySelector('.subbooking-additionalperson-form [data-no-submit=\"1\"]');\n            dynamicForm.processNoSubmitButton(button);\n        }\n    });\n\n    initButtons(id, container, dynamicForm);\n}\n\n/**\n * @param {integer} id\n * @param {HTMLElement} container\n * @param {*} dynamicForm\n */\nfunction initButtons(id, container, dynamicForm) {\n\n    // We always need to get the buttons anew, as they might have been replaced.\n\n    const bookitbutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.BOOKINGBUTTON + id);\n    const continuebutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.CONTINUEBUTTON);\n\n    // This goes on continue button.\n    // It will prevent the action to be triggered.\n    // Unless the form is validated (see above).\n    if (continuebutton) {\n\n        // eslint-disable-next-line no-console\n        console.log('continuebutton', continuebutton);\n\n        blockButton(continuebutton, dynamicForm);\n    }\n\n    // This goes on the bookit button as well as on the shopping cart.\n    // It will prevent the action to be triggered.\n    // Unless the form is validated (see above).\n    if (bookitbutton) {\n\n        // eslint-disable-next-line no-console\n        console.log('bookitbutton', bookitbutton);\n\n        blockButton(bookitbutton, dynamicForm);\n    }\n\n    // Only after the Form is loaded, we reinitialze the buttons.\n    try {\n        buttoninit();\n        initbookitbutton();\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n    }\n}\n\n/**\n *\n * @param {HTMLElement} button\n * @param {*} dynamicForm\n */\nfunction blockButton(button, dynamicForm) {\n\n    // eslint-disable-next-line no-console\n    console.log('blockButton', button);\n\n    if (!button.dataset.blocked) {\n        button.dataset.blocked = true;\n\n         // eslint-disable-next-line no-console\n        console.log('blockButton add listener', button);\n\n        button.addEventListener('click', () => {\n\n            // eslint-disable-next-line no-console\n            console.log('click');\n\n            dynamicForm.submitFormAjax();\n        });\n    }\n}\n\n/**\n *\n * @param {integer} id\n * @param {HTMLElement} container\n */\nfunction unblockButtons(id, container) {\n\n    // We always need to get the buttons anew, as they might have been replaced.\n\n    const bookitbutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.BOOKINGBUTTON + id);\n    const continuebutton = container.closest(SELECTOR.MODALBODY).querySelector(SELECTOR.CONTINUEBUTTON);\n\n    if (bookitbutton) {\n        bookitbutton.dataset.blocked = 'false';\n        bookitbutton.click();\n    }\n\n    if (continuebutton) {\n        continuebutton.dataset.blocked = 'false';\n        if (!bookitbutton) {\n            continuebutton.click();\n        }\n    }\n}\n\n"],"names":["console","log","container","document","querySelector","SELECTOR","id","dataset","continuebutton","closest","dynamicForm","DynamicForm","load","bookitbutton","addEventListener","events","FORM_SUBMITTED","e","detail","blocked","click","unblockButtons","eventTypes","filterContentUpdated","target","initButtons","SERVER_VALIDATION_ERROR","classList","contains","button","processNoSubmitButton","blockButton","submitFormAjax"],"mappings":";;;;;4FAyCIA,QAAQC,IAAI,2BAENC,UAAYC,SAASC,cAAcC,wBAEnCC,GAAKJ,UAAUK,QAAQD,GAEvBE,eAAiBN,UAAUO,QAAQJ,oBAAoBD,cAAcC,yBACrEK,YAAc,IAAIC,qBAAYT,UAAW,8DAGzCQ,YAAYE,KAAK,CAACN,GAAIA,WAEtBO,aAAeX,UAAUO,QAAQJ,oBAAoBD,cAAcC,uBAAyBC,IAGlGN,QAAQC,IAAIY,aAAcL,gBAE1BE,YAAYI,iBAAiBJ,YAAYK,OAAOC,gBAAgBC,IAC3CA,EAAEC,mBA+GHZ,GAAIJ,iBAIlBW,aAAeX,UAAUO,QAAQJ,oBAAoBD,cAAcC,uBAAyBC,IAC5FE,eAAiBN,UAAUO,QAAQJ,oBAAoBD,cAAcC,yBAEvEQ,eACAA,aAAaN,QAAQY,QAAU,QAC/BN,aAAaO,SAGbZ,iBACAA,eAAeD,QAAQY,QAAU,QAC5BN,cACDL,eAAeY,SA1HfC,CAAef,GAAIJ,WAEnBQ,YAAYE,KAAK,CAACN,GAAIA,SAI9BH,SAASW,iBAAiBQ,mBAAWC,sBAAsBN,IAEvDjB,QAAQC,IAAIgB,EAAEO,QAEdC,YAAYnB,GAAIJ,UAAWQ,gBAG/BA,YAAYI,iBAAiBJ,YAAYK,OAAOW,yBAAyB,KAGrE1B,QAAQC,IAAI,mBAEZwB,YAAYnB,GAAIJ,UAAWQ,gBAG/BA,YAAYI,iBAAiB,UAAUG,OAE/BA,EAAEO,OAAOG,UAAUC,SAAS,iBAAkB,OACxCC,OAAS1B,SAASC,cAAc,0DACtCM,YAAYoB,sBAAsBD,YAI1CJ,YAAYnB,GAAIJ,UAAWQ,sFAlEzBL,uBAEa,oCAFbA,mBAGS,cAHTA,wBAKc,+CALdA,uBAMa,+DAoEVoB,YAAYnB,GAAIJ,UAAWQ,mBAI1BG,aAAeX,UAAUO,QAAQJ,oBAAoBD,cAAcC,uBAAyBC,IAC5FE,eAAiBN,UAAUO,QAAQJ,oBAAoBD,cAAcC,yBAKvEG,iBAGAR,QAAQC,IAAI,iBAAkBO,gBAE9BuB,YAAYvB,eAAgBE,cAM5BG,eAGAb,QAAQC,IAAI,eAAgBY,cAE5BkB,YAAYlB,aAAcH,wEAO5B,MAAOO,GAELjB,QAAQC,IAAIgB,aASXc,YAAYF,OAAQnB,aAGzBV,QAAQC,IAAI,cAAe4B,QAEtBA,OAAOtB,QAAQY,UAChBU,OAAOtB,QAAQY,SAAU,EAGzBnB,QAAQC,IAAI,2BAA4B4B,QAExCA,OAAOf,iBAAiB,SAAS,KAG7Bd,QAAQC,IAAI,SAEZS,YAAYsB"}