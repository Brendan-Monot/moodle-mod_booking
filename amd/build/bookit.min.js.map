{"version":3,"file":"bookit.min.js","sources":["../src/bookit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookit\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nvar currentbookitpage = {};\nvar totalbookitpages = {};\n\nvar SELECTORS = {\n    MODALID: '#sbPrePageModal',\n    INMODALDIV: ' div.pageContent',\n    CONTINUEBUTTON: 'a.continue-button',\n    BACKBUTTON: 'a.back-button',\n    BOOKITBUTTON: 'div.booking-button-area',\n    INMODALBUTTON: 'div.in-modal-button',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/**\n * Initializes the bookit button for the normal bookit function.\n * @param {integer} itemid\n * @param {string} area\n */\nexport const initbookitbutton = (itemid, area) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initbookitbutton', itemid, area);\n\n    const initselector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid]' +\n    '[data-area]';\n\n    if (!itemid || !area) {\n        const initbuttons = document.querySelectorAll(initselector);\n        initbuttons.forEach(button => {\n            const inititemid = button.dataset.itemid;\n            const initarea = button.dataset.area;\n            initbookitbutton(inititemid, initarea);\n        });\n        return;\n    }\n\n    const selector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid=\"' + itemid + '\"]' +\n    '[data-area=\"' + area + '\"]';\n\n    const buttons = document.querySelectorAll(selector);\n\n    // eslint-disable-next-line no-console\n    console.log(selector, buttons);\n\n    if (!buttons) {\n        return;\n    }\n\n    // We support more than one booking button on the same page.\n    buttons.forEach(button => {\n\n        if (button.dataset.nojs) {\n            return;\n        }\n\n        // eslint-disable-next-line no-console\n        console.log('add click listener ', button);\n        if (!button.dataset.initialized) {\n            button.dataset.initialized = 'true';\n\n            const userid = button.dataset.userid;\n\n            button.addEventListener('click', e => {\n\n                e.stopPropagation();\n\n                // eslint-disable-next-line no-console\n                console.log('clicked ', e.target);\n\n                bookit(itemid, area, userid);\n            });\n        }\n    });\n};\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} totalnumberofpages\n */\nexport const initprepagemodal = (optionid, totalnumberofpages) => {\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    respondToVisibility(optionid, totalnumberofpages, loadPreBookingPage);\n\n    // We can add the click listener to the continue button right away.\n\n    initializeButton(optionid, true); // Back button.\n    initializeButton(optionid, false); // Continue button.\n};\n\n/**\n * React on visibility change.\n * @param {integer} optionid\n * @param {integer} totalnumberofpages\n * @param {function} callback\n */\nfunction respondToVisibility(optionid, totalnumberofpages, callback) {\n\n    if (totalnumberofpages < 1) {\n        return;\n    }\n\n    const selector = SELECTORS.MODALID + optionid + SELECTORS.INMODALDIV;\n    let element = document.querySelector(selector);\n\n    if (!element) {\n        return;\n    }\n\n    // eslint-disable-next-line no-console\n    // console.log(selector, element);\n\n    var observer = new MutationObserver(function() {\n        if (!isHidden(element)) {\n            // Todo: Make sure it's not triggered on close.\n            callback(optionid);\n        }\n    });\n\n    // We look if we find a hidden parent. If not, we load right away.\n    while (element !== null) {\n        if (!isHidden(element)) {\n            element = element.parentElement;\n        } else {\n            if (element.dataset.observed) {\n                return;\n            }\n\n            observer.observe(element, {attributes: true});\n            element.dataset.observed = true;\n            return;\n        }\n    }\n    callback(optionid, totalnumberofpages);\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\nfunction isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n\n/**\n * Loads the (next) pre booking page.\n * @param {integer} optionid\n */\nexport const loadPreBookingPage = (\n    optionid) => {\n\n    // eslint-disable-next-line no-console\n    // console.log('loadPreBookingPage ' + optionid, totalnumberofpages);\n\n    // We need to clear the content of the div.\n    const selector = SELECTORS.MODALID + optionid + SELECTORS.INMODALDIV;\n\n    const element = document.querySelector(selector);\n\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n\n    Ajax.call([{\n        methodname: \"mod_booking_load_pre_booking_page\",\n        args: {\n            'optionid': optionid,\n            'pagenumber': currentbookitpage[optionid],\n        },\n        done: function(res) {\n\n            const jsonobject = JSON.parse(res.json);\n\n            // We support more than one template, they will be seperated by comma.\n            // We have a data key in the json\n            const templates = res.template.split(',');\n            let dataarray = jsonobject;\n            const buttontype = res.buttontype;\n\n            renderTemplatesOnPage(templates, dataarray, selector);\n\n            showRightButton(optionid, buttontype);\n\n            return true;\n        },\n        fail: function(err) {\n            // eslint-disable-next-line no-console\n            console.log(err);\n        }\n    }]);\n};\n\n/**\n *\n * @param {string} templates\n * @param {object} dataarray\n * @param {string} selector\n */\nasync function renderTemplatesOnPage(templates, dataarray, selector) {\n\n    for (const template of templates) {\n        // eslint-disable-next-line no-console\n        console.log('i render first this template, ', template);\n\n        const data = dataarray.shift();\n\n        if (!data) {\n            return true;\n        }\n\n        await Templates.renderForPromise(template, data.data).then(({html, js}) => {\n\n            // eslint-disable-next-line no-console\n            console.log('no i append this template, ', template);\n            Templates.appendNodeContents(selector, html, js);\n\n            return true;\n        }).catch(ex => {\n            Notification.addNotification({\n                message: 'failed rendering ' + ex,\n                type: \"danger\"\n            });\n        });\n    }\n    return true;\n}\n\n/**\n * Reveal the hidden continue button.\n * @param {interger} optionid\n * @param {interger} buttontype\n */\nfunction showRightButton(optionid, buttontype) {\n\n    // eslint-disable-next-line no-console\n    console.log(SELECTORS.MODALID + optionid + ' ' + SELECTORS.INMODALBUTTON);\n\n    // If we are not yet on the last booking page.\n    if (currentbookitpage[optionid] + 1 < totalbookitpages[optionid]) {\n        const element = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.CONTINUEBUTTON);\n        if (element) {\n            element.classList.remove('hidden');\n\n            if (buttontype == 1) {\n                element.classList.add('disabled');\n            }\n        }\n\n        const inModalButton = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.INMODALBUTTON);\n        if (inModalButton) {\n            inModalButton.classList.add('hidden');\n        }\n\n    } else {\n        // We are on the last booking page.\n        const element = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.CONTINUEBUTTON);\n        if (element) {\n            element.classList.add('hidden');\n        }\n\n        if (buttontype == 1) {\n            const inModalButton = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.INMODALBUTTON);\n            if (inModalButton) {\n                inModalButton.classList.add('hidden');\n            }\n        } else {\n            const inModalButton = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.INMODALBUTTON);\n            if (inModalButton) {\n                inModalButton.classList.remove('hidden');\n            }\n        }\n    }\n    if (currentbookitpage[optionid] > 0) {\n        const element = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.BACKBUTTON);\n        if (element) {\n            element.classList.remove('hidden');\n\n            if (buttontype == 1) {\n                // element.classList.add('disabled');\n            }\n        }\n\n    } else {\n        const element = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.BACKBUTTON);\n        if (element) {\n            element.classList.add('hidden');\n        }\n    }\n\n}\n\n/**\n *\n * @param {integer} optionid\n * @param {boolean} show\n */\nexport function toggleContinueButton(optionid, show = null) {\n\n    const continueButton = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.CONTINUEBUTTON);\n\n    const bookingButton = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.BOOKITBUTTON);\n\n    // eslint-disable-next-line no-console\n    console.log(bookingButton, optionid, show);\n\n    if (continueButton) {\n        disableButton(continueButton, show);\n    }\n    if (bookingButton) {\n        disableButton(bookingButton, show);\n    }\n\n    showBookItButton(optionid, show);\n}\n\n/**\n *\n * @param {integer} optionid\n * @param {boolean} show\n */\nfunction showBookItButton(optionid, show) {\n\n    // Hide Bookit button.\n    const inModalButton = document.querySelector(SELECTORS.MODALID + optionid + ' ' + SELECTORS.INMODALBUTTON);\n    if (currentbookitpage[optionid] + 1 == totalbookitpages[optionid]) {\n        // Being on the last page.\n        if (show) {\n            inModalButton.classList.remove('hidden');\n        } else {\n            inModalButton.classList.add('hidden');\n        }\n    }\n}\n\n/**\n *\n * @param {HTMLElement} element\n * @param {boolean} show\n */\nfunction disableButton(element, show) {\n\n    // eslint-disable-next-line no-console\n    console.log(element, show);\n\n    // If show is not defined yet, we define it automatically.\n    if (show === null) {\n        if (element.classList.contains('disabled')) {\n            show = true;\n        } else {\n            show = false;\n        }\n    }\n\n    // Now we add or remove the disabled class.\n    if (show) {\n        element.classList.remove('disabled');\n    } else {\n        element.classList.add('disabled');\n    }\n}\n\n/**\n * Add the click listener to a prepage modal button.\n * @param {integer} optionid\n * @param {bool} back // If it is the back button, it's true, else its continue.\n */\nfunction initializeButton(optionid, back) {\n    let selector = \"\";\n\n    if (back) {\n        selector = SELECTORS.MODALID + optionid + ' ' + SELECTORS.BACKBUTTON;\n    } else {\n        selector = SELECTORS.MODALID + optionid + ' ' + SELECTORS.CONTINUEBUTTON;\n    }\n\n    const element = document.querySelector(selector);\n\n    // eslint-disable-next-line no-console\n    // console.log(element, selector);\n\n    if (element && !element.dataset.prepageinit) {\n        element.dataset.prepageinit = true;\n\n        element.addEventListener('click', (e) => {\n\n            e.stopPropagation();\n\n            if (element.classList.contains('hidden')) {\n                return;\n            }\n\n            if (back) {\n                currentbookitpage[optionid]--;\n            } else {\n                currentbookitpage[optionid]++;\n            }\n\n            loadPreBookingPage(optionid);\n        });\n    }\n}\n\n/**\n *\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n */\nfunction bookit(itemid, area, userid) {\n\n    Ajax.call([{\n        methodname: \"mod_booking_bookit\",\n        args: {\n            'itemid': itemid,\n            'area': area,\n            'userid': userid,\n        },\n        done: function(res) {\n\n            // eslint-disable-next-line no-console\n            console.log(res);\n\n            const jsonarray = JSON.parse(res.json);\n\n            // We might have more than one template to render.\n            const templates = res.template.split(',');\n\n            // There might be more than one button area.\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\n                '[data-itemid=\\'' + itemid + '\\']' +\n                '[data-area=\\'' + area + '\\']');\n\n            const promises = [];\n\n            // We run through every button. and render the data.\n            buttons.forEach(button => {\n\n                while (button.firstChild) {\n                    const child = button.firstChild;\n                    child.remove();\n                }\n\n                // For every button, we need a new jsonarray.\n                const arraytoreduce = [...jsonarray];\n\n                // eslint-disable-next-line no-console\n                console.log(templates, arraytoreduce);\n\n                templates.forEach(template => {\n                    const data = arraytoreduce.shift();\n\n                    // We need to check if this will render the prepagemodal again.\n                    // We never render the prepage modal in the in modal button.\n                    if (!(template === 'mod_booking/prepagemodal'\n                            && button.parentElement.classList.contains('in-modal-button'))) {\n\n                        // eslint-disable-next-line no-console\n                        console.log(template, data, button);\n\n                        const datatorender = data.data ?? data;\n\n                        // eslint-disable-next-line no-console\n                        console.log(datatorender);\n\n                        const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\n\n                            Templates.appendNodeContents(button, html, js);\n\n                            return true;\n                        }).catch(ex => {\n                            Notification.addNotification({\n                                message: 'failed rendering ' + ex,\n                                type: \"danger\"\n                            });\n                        });\n\n                        promises.push(promise);\n                    }\n                });\n            });\n\n            Promise.all(promises).then(() => {\n                // eslint-disable-next-line no-console\n                console.log(currentbookitpage[itemid], totalbookitpages[itemid]);\n\n                // We close the modal only if we are on the last page of the booking pages.\n                if (currentbookitpage[itemid] == totalbookitpages[itemid] - 1) {\n\n                    const backdrop = document.querySelector(SELECTORS.STATICBACKDROP);\n                    const modal = document.querySelector(SELECTORS.MODALID + itemid);\n                    if (modal) {\n                        modal.classList.remove('show');\n                    }\n                    if (backdrop) {\n                        backdrop.remove();\n                    }\n                } else {\n                    toggleContinueButton(itemid, true);\n                }\n                return true;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n        }\n    }]);\n}"],"names":["currentbookitpage","totalbookitpages","SELECTORS","initbookitbutton","itemid","area","console","log","initselector","document","querySelectorAll","forEach","button","inititemid","dataset","initarea","selector","buttons","nojs","initialized","userid","addEventListener","e","stopPropagation","target","call","methodname","args","done","res","jsonarray","JSON","parse","json","templates","template","split","promises","firstChild","remove","arraytoreduce","data","shift","parentElement","classList","contains","datatorender","promise","Templates","renderForPromise","then","_ref2","html","js","appendNodeContents","catch","ex","addNotification","message","type","push","Promise","all","backdrop","querySelector","modal","toggleContinueButton","bookit","isHidden","el","style","window","getComputedStyle","display","visibility","optionid","totalnumberofpages","callback","element","observer","MutationObserver","observed","observe","attributes","respondToVisibility","loadPreBookingPage","initializeButton","removeChild","jsonobject","dataarray","buttontype","_ref","renderTemplatesOnPage","add","inModalButton","showRightButton","fail","err","show","continueButton","bookingButton","disableButton","showBookItButton","back","prepageinit"],"mappings":"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"}