{"version":3,"file":"bookit.min.js","sources":["../src/bookit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookit\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nvar currentbookitpage = {};\nvar totalbookitpages = {};\n\nvar SELECTORS = {\n    MODALID: 'sbPrePageModal_',\n    INMODALDIV: ' div.pageContent',\n    CONTINUEBUTTON: 'a.continue-button', // Don't want to find button right now.\n    BACKBUTTON: 'a.back-button', // Don't want to find button right now.\n    BOOKITBUTTON: 'div.booking-button-area',\n    INMODALBUTTON: 'div.in-modal-button',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/**\n * Initializes the bookit button for the normal bookit function.\n * @param {integer} itemid\n * @param {string} area\n */\nexport const initbookitbutton = (itemid, area) => {\n\n    const initselector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid]' +\n    '[data-area]';\n\n    if (!itemid || !area) {\n        const initbuttons = document.querySelectorAll(initselector);\n        initbuttons.forEach(button => {\n            const inititemid = button.dataset.itemid;\n            const initarea = button.dataset.area;\n            initbookitbutton(inititemid, initarea);\n        });\n        return;\n    }\n\n    const selector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid=\"' + itemid + '\"]' +\n    '[data-area=\"' + area + '\"]';\n\n    const buttons = document.querySelectorAll(selector);\n\n    if (!buttons) {\n        return;\n    }\n\n    // We support more than one booking button on the same page.\n    buttons.forEach(button => {\n\n        if (button.dataset.nojs) {\n            return;\n        }\n\n        if (!button.dataset.initialized) {\n            button.dataset.initialized = 'true';\n\n            const userid = button.dataset.userid;\n\n            button.addEventListener('click', e => {\n\n                e.stopPropagation();\n\n                bookit(itemid, area, userid);\n            });\n        }\n    });\n};\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} totalnumberofpages\n */\nexport const initprepagemodal = (optionid, totalnumberofpages) => {\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    respondToVisibility(optionid, totalnumberofpages, loadPreBookingPage);\n\n    // We can add the click listener to the continue button right away.\n\n    initializeButton(optionid, true); // Back button.\n    initializeButton(optionid, false); // Continue button.\n};\n\n/**\n * React on visibility change.\n * @param {integer} optionid\n * @param {integer} totalnumberofpages\n * @param {function} callback\n */\nfunction respondToVisibility(optionid, totalnumberofpages, callback) {\n\n    if (totalnumberofpages < 1) {\n        return;\n    }\n\n    let elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"]\");\n\n    elements.forEach(element => {\n        if (!element) {\n            return;\n        }\n\n        var observer = new MutationObserver(function() {\n            if (!isHidden(element)) {\n                // Todo: Make sure it's not triggered on close.\n                callback(optionid);\n            }\n        });\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (element !== null) {\n            if (!isHidden(element)) {\n                element = element.parentElement;\n            } else {\n                if (element.dataset.observed) {\n                    return;\n                }\n\n                observer.observe(element, {attributes: true});\n                element.dataset.observed = true;\n                return;\n            }\n        }\n        callback(optionid, totalnumberofpages);\n    });\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\nfunction isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n\n/**\n * Loads the (next) pre booking page.\n * @param {integer} optionid\n */\nexport const loadPreBookingPage = (\n    optionid) => {\n\n    const element = returnVisibleElement(optionid, SELECTORS.INMODALDIV);\n\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n\n    Ajax.call([{\n        methodname: \"mod_booking_load_pre_booking_page\",\n        args: {\n            'optionid': optionid,\n            'pagenumber': currentbookitpage[optionid],\n        },\n        done: function(res) {\n\n            const jsonobject = JSON.parse(res.json);\n\n            // We support more than one template, they will be seperated by comma.\n            // We have a data key in the json\n            const templates = res.template.split(',');\n            let dataarray = jsonobject;\n            // const buttontype = res.buttontype;\n\n            renderTemplatesOnPage(templates, dataarray, element);\n\n            // showRightButton(optionid, buttontype);\n\n            return true;\n        },\n        fail: function(err) {\n            // eslint-disable-next-line no-console\n            console.log(err);\n        }\n    }]);\n};\n\n/**\n *\n * @param {string} templates\n * @param {object} dataarray\n * @param {HTMLElement} element\n */\nasync function renderTemplatesOnPage(templates, dataarray, element) {\n\n    for (const template of templates) {\n\n        const data = dataarray.shift();\n\n        if (!data) {\n            return true;\n        }\n\n        await Templates.renderForPromise(template, data.data).then(({html, js}) => {\n\n            Templates.appendNodeContents(element, html, js);\n\n            return true;\n        }).catch(ex => {\n            Notification.addNotification({\n                message: 'failed rendering ' + ex,\n                type: \"danger\"\n            });\n        });\n    }\n    return true;\n}\n\n// /**\n//  * Reveal the hidden continue button.\n//  * @param {interger} optionid\n//  * @param {interger} buttontype\n//  */\n// function showRightButton(optionid, buttontype) {\n\n//     // If we are not yet on the last booking page.\n//     if (currentbookitpage[optionid] + 1 < totalbookitpages[optionid]) {\n//         const element = returnVisibleElement(optionid, SELECTORS.CONTINUEBUTTON);\n//         if (element) {\n//             element.classList.remove('hidden');\n\n//             if (buttontype == 1) {\n//                 element.classList.add('disabled');\n//             }\n//         }\n\n//         const inModalButton = returnVisibleElement(optionid, SELECTORS.INMODALBUTTON);\n//         if (inModalButton) {\n//             inModalButton.classList.add('hidden');\n//         }\n\n//     } else {\n//         // We are on the last booking page.\n//         const element = returnVisibleElement(optionid, SELECTORS.CONTINUEBUTTON);\n//         if (element) {\n//             element.classList.add('hidden');\n//         }\n\n//         if (buttontype == 1) {\n//             const inModalButton = returnVisibleElement(optionid, SELECTORS.INMODALBUTTON);\n//             if (inModalButton) {\n//                 inModalButton.classList.add('hidden');\n//             }\n//         } else {\n//             const inModalButton = returnVisibleElement(optionid, SELECTORS.INMODALBUTTON);\n//             if (inModalButton) {\n//                 inModalButton.classList.remove('hidden');\n//             }\n//         }\n//     }\n//     if (currentbookitpage[optionid] > 0) {\n//         const element = returnVisibleElement(optionid, SELECTORS.BACKBUTTON);\n//         if (element) {\n//             element.classList.remove('hidden');\n\n//             if (buttontype == 1) {\n//                 // element.classList.add('disabled');\n//             }\n//         }\n\n//     } else {\n//         const element = returnVisibleElement(optionid, SELECTORS.BACKBUTTON);\n//         if (element) {\n//             element.classList.add('hidden');\n//         }\n//     }\n\n// }\n\n/**\n *\n * @param {integer} optionid\n * @param {boolean} show\n */\nexport function toggleContinueButton(optionid, show = null) {\n\n    const continueButton = returnVisibleElement(optionid, SELECTORS.CONTINUEBUTTON);\n\n    const bookingButton = returnVisibleElement(optionid, SELECTORS.BOOKITBUTTON);\n\n    if (continueButton) {\n        disableButton(continueButton, show);\n    }\n    if (bookingButton) {\n        disableButton(bookingButton, show);\n    }\n\n    showBookItButton(optionid, show);\n}\n\n/**\n *\n * @param {integer} optionid\n * @param {boolean} show\n */\nfunction showBookItButton(optionid, show) {\n\n    // Hide Bookit button.\n    const inModalButton = returnVisibleElement(optionid, SELECTORS.INMODALBUTTON);\n    if (currentbookitpage[optionid] + 1 == totalbookitpages[optionid]) {\n        // Being on the last page.\n        if (show) {\n            inModalButton.classList.remove('hidden');\n        } else {\n            inModalButton.classList.add('hidden');\n        }\n    }\n}\n\n/**\n *\n * @param {HTMLElement} element\n * @param {boolean} show\n */\nfunction disableButton(element, show) {\n\n    // If show is not defined yet, we define it automatically.\n    if (show === null) {\n        if (element.classList.contains('disabled')) {\n            show = true;\n        } else {\n            show = false;\n        }\n    }\n\n    // Now we add or remove the disabled class.\n    if (show) {\n        element.classList.remove('disabled');\n    } else {\n        element.classList.add('disabled');\n    }\n}\n\n/**\n * Add the click listener to a prepage modal button.\n * @param {integer} optionid\n * @param {bool} back // If it is the back button, it's true, else its continue.\n */\nfunction initializeButton(optionid, back) {\n\n    let elements = null;\n\n    if (back) {\n        elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"] \" + SELECTORS.BACKBUTTON);\n    } else {\n        elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"] \" + SELECTORS.CONTINUEBUTTON);\n    }\n\n    elements.forEach(element => {\n        if (element && !element.dataset.prepageinit) {\n            element.dataset.prepageinit = true;\n\n            element.addEventListener('click', (e) => {\n\n                e.stopPropagation();\n\n                if (element.classList.contains('hidden')) {\n                    return;\n                }\n\n                if (back) {\n                    currentbookitpage[optionid]--;\n                } else {\n                    currentbookitpage[optionid]++;\n                }\n\n                loadPreBookingPage(optionid);\n            });\n        }\n    });\n}\n\n/**\n *\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n */\nfunction bookit(itemid, area, userid) {\n\n    Ajax.call([{\n        methodname: \"mod_booking_bookit\",\n        args: {\n            'itemid': itemid,\n            'area': area,\n            'userid': userid,\n        },\n        done: function(res) {\n\n            const jsonarray = JSON.parse(res.json);\n\n            // We might have more than one template to render.\n            const templates = res.template.split(',');\n\n            // There might be more than one button area.\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\n                '[data-itemid=\\'' + itemid + '\\']' +\n                '[data-area=\\'' + area + '\\']');\n\n            const promises = [];\n\n            // We run through every button. and render the data.\n            buttons.forEach(button => {\n\n                while (button.firstChild) {\n                    const child = button.firstChild;\n                    child.remove();\n                }\n\n                // For every button, we need a new jsonarray.\n                const arraytoreduce = [...jsonarray];\n\n                templates.forEach(template => {\n                    const data = arraytoreduce.shift();\n\n                    // We need to check if this will render the prepagemodal again.\n                    // We never render the prepage modal in the in modal button.\n                    if (!(template === 'mod_booking/bookingpage/prepagemodal'\n                            && button.parentElement.classList.contains('in-modal-button'))) {\n\n                        const datatorender = data.data ?? data;\n\n                        const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\n\n                            Templates.appendNodeContents(button, html, js);\n\n                            return true;\n                        }).catch(ex => {\n                            Notification.addNotification({\n                                message: 'failed rendering ' + ex,\n                                type: \"danger\"\n                            });\n                        });\n\n                        promises.push(promise);\n                    }\n                });\n            });\n\n            Promise.all(promises).then(() => {\n\n                // The actions on successful booking are executed elsewhere.\n                return true;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n        }\n    }]);\n}\n\n/**\n * We want to find out the visible modal\n * @param {integer} optionid\n * @param {string} appendedSelector\n * @returns {HTMLElement}\n */\nfunction returnVisibleElement(optionid, appendedSelector) {\n\n    // First, we get all the possbile Elements (we don't now the unique id appended to the element.)\n    const selector = \"[id^=\" + SELECTORS.MODALID + optionid + \"].show \" + appendedSelector;\n\n    const elements = document.querySelectorAll(selector);\n\n    let visibleElement = null;\n\n    elements.forEach(element => {\n        visibleElement = element;\n    });\n\n    return visibleElement;\n}\n\n/**\n * Load next prepage booking page.\n * @param {int} optionid\n */\nexport function continueToNextPage(optionid) {\n\n    currentbookitpage[optionid]++;\n\n    loadPreBookingPage(optionid);\n}\n\n/**\n *  Load previous prepage booking page.\n * @param {int} optionid\n */\nexport function backToPreviousPage(optionid) {\n\n    currentbookitpage[optionid]--;\n\n    loadPreBookingPage(optionid);\n}"],"names":["optionid","currentbookitpage","loadPreBookingPage","show","continueButton","returnVisibleElement","SELECTORS","bookingButton","disableButton","showBookItButton","totalbookitpages","initbookitbutton","itemid","area","initselector","document","querySelectorAll","forEach","button","inititemid","dataset","initarea","selector","buttons","nojs","initialized","userid","addEventListener","e","stopPropagation","call","methodname","args","done","res","jsonarray","JSON","parse","json","templates","template","split","promises","firstChild","remove","arraytoreduce","data","shift","parentElement","classList","contains","datatorender","promise","Templates","renderForPromise","then","_ref2","html","js","appendNodeContents","catch","ex","addNotification","message","type","push","Promise","all","console","log","bookit","isHidden","el","style","window","getComputedStyle","display","visibility","totalnumberofpages","callback","element","observer","MutationObserver","observed","observe","attributes","respondToVisibility","initializeButton","removeChild","jsonobject","dataarray","_ref","renderTemplatesOnPage","fail","err","inModalButton","add","back","elements","prepageinit","appendedSelector","visibleElement"],"mappings":"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"}