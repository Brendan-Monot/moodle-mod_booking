{"version":3,"file":"dynamicsemestersform.min.js","sources":["../src/dynamicsemestersform.js"],"sourcesContent":["/* eslint-disable promise/always-return */\n/* eslint-disable promise/catch-or-return */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    mod_booking\n * @author     Bernhard Fischer\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Dynamic semesters form.\n *\n * @module     mod_booking/dynamicsemestersform\n * @copyright  2022 Wunderbyte GmbH\n * @author     Bernhard Fischer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport DynamicForm from 'core_form/dynamicform';\n\nexport const init = (selector, formClass, existingsemesters) => {\n\n    waitForElm(selector).then((elm) => {\n        // eslint-disable-next-line no-console\n        console.log('form element loaded: ', elm);\n        const form = new DynamicForm(elm, formClass);\n\n        // eslint-disable-next-line no-console\n        console.log('form element created: ', form);\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.preventDefault();\n\n            const response = e.detail;\n            form.load({...existingsemesters, response});\n\n            // eslint-disable-next-line no-console\n            console.log('form submitted');\n        });\n\n        // Cancel button does not make much sense in such forms but since it's there we'll just reload.\n        form.addEventListener(form.events.FORM_CANCELLED, (e) => {\n            e.preventDefault();\n\n            // eslint-disable-next-line capitalized-comments\n            // addNotification('existingsemesters:' + JSON.stringify(existingsemesters));\n\n            // eslint-disable-next-line promise/catch-or-return\n            form.notifyResetFormChanges()\n                .then(() => form.load(existingsemesters));\n\n            // eslint-disable-next-line no-console\n            console.log('form cancelled');\n        });\n\n        // Demo of different events.\n        // eslint-disable-next-line capitalized-comments\n        // form.addEventListener(form.events.NOSUBMIT_BUTTON_PRESSED, () => addNotification('No submit button pressed.'));\n        // eslint-disable-next-line capitalized-comments\n        // form.addEventListener(form.events.CLIENT_VALIDATION_ERROR, () => addNotification('Client-side validation error'));\n        // eslint-disable-next-line capitalized-comments\n        // form.addEventListener(form.events.SERVER_VALIDATION_ERROR, () => addNotification('Server-side validation error'));\n        // eslint-disable-next-line capitalized-comments\n        // form.addEventListener(form.events.ERROR, (e) => addNotification('There was a form error: ' + e.detail.message));\n        // eslint-disable-next-line capitalized-comments\n        // form.addEventListener(form.events.SUBMIT_BUTTON_PRESSED, () => addNotification('Submit button pressed'));\n        // eslint-disable-next-line capitalized-comments\n        // form.addEventListener(form.events.CANCEL_BUTTON_PRESSED, () => addNotification('Cancel button pressed'));\n    });\n};\n\n/**\n * Wait until a certain element is loaded.\n * @param {string} selector - The element selector.\n * @returns {Promise}\n */\n function waitForElm(selector) {\n    // eslint-disable-next-line consistent-return\n    return new Promise(resolve => {\n        if (document.querySelector(selector)) {\n            return resolve(document.querySelector(selector));\n        }\n        const observer = new MutationObserver(() => {\n            if (document.querySelector(selector)) {\n                resolve(document.querySelector(selector));\n                observer.disconnect();\n            }\n        });\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    });\n}\n"],"names":["selector","formClass","existingsemesters","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","observe","body","childList","subtree","waitForElm","then","elm","console","log","form","DynamicForm","addEventListener","events","FORM_SUBMITTED","e","preventDefault","response","detail","load","FORM_CANCELLED","notifyResetFormChanges"],"mappings":";;;;;;;;;;;;;;kKAkCoB,CAACA,SAAUC,UAAWC,+BAwDrBF,iBAEV,IAAIG,SAAQC,aACXC,SAASC,cAAcN,iBAChBI,QAAQC,SAASC,cAAcN,iBAEpCO,SAAW,IAAIC,kBAAiB,KAC9BH,SAASC,cAAcN,YACvBI,QAAQC,SAASC,cAAcN,WAC/BO,SAASE,iBAGjBF,SAASG,QAAQL,SAASM,KAAM,CAC5BC,WAAW,EACXC,SAAS,QApEjBC,CAAWd,UAAUe,MAAMC,MAEvBC,QAAQC,IAAI,wBAAyBF,WAC/BG,KAAO,IAAIC,qBAAYJ,IAAKf,WAGlCgB,QAAQC,IAAI,yBAA0BC,MAEtCA,KAAKE,iBAAiBF,KAAKG,OAAOC,gBAAiBC,IAC/CA,EAAEC,uBAEIC,SAAWF,EAAEG,OACnBR,KAAKS,KAAK,IAAI1B,kBAAmBwB,SAAAA,WAGjCT,QAAQC,IAAI,qBAIhBC,KAAKE,iBAAiBF,KAAKG,OAAOO,gBAAiBL,IAC/CA,EAAEC,iBAMFN,KAAKW,yBACAf,MAAK,IAAMI,KAAKS,KAAK1B,qBAG1Be,QAAQC,IAAI"}